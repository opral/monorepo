#!/usr/bin/env node
import { promises as fs } from "node:fs";
import { dirname, join } from "node:path";
import { fileURLToPath } from "node:url";
import { createRequire } from "node:module";

const require = createRequire(import.meta.url);

const wasmRelativePath = "sqlite-wasm/jswasm/sqlite3.wasm";
const targetDir = "../src/database/sqlite";
const targetBaseName = "sqlite-wasm-binary";
const bytesPerLine = 20;

function chunk(values, size) {
	const result = [];
	for (let i = 0; i < values.length; i += size) {
		result.push(values.slice(i, i + size));
	}
	return result;
}

async function main() {
	const pkgPath = require.resolve("@sqlite.org/sqlite-wasm/package.json");
	const packageDir = dirname(pkgPath);
	const wasmPath = join(packageDir, wasmRelativePath);
	const wasmBytes = await fs.readFile(wasmPath);
	const numbers = Array.from(wasmBytes);

	const chunks = chunk(numbers, bytesPerLine);
	const literal = chunks
		.map((group, index) => {
			const suffix = index === chunks.length - 1 ? "" : ",";
			return `\t${group.map((value) => value.toString()).join(", ")}${suffix}`;
		})
		.join("\n");

	const header = `/**\n * @file Auto-generated WebAssembly payload for SQLite.\n *\n * Generated by scripts/embed-sqlite-wasm.js â€” do not edit manually.\n * Run \`node ./scripts/embed-sqlite-wasm.js\` to refresh the bytes from the\n * upstream \`sqlite3.wasm\`.\n */\n\n`;

	const jsBody = `${header}export const wasmBinary = new Uint8Array([\n${literal}\n]).buffer;\n\nexport default wasmBinary;\n`;
	const dtsBody = `export declare const wasmBinary: ArrayBuffer;\nexport default wasmBinary;\n`;

	const baseUrl = new URL(`${targetDir}/`, import.meta.url);
	const jsPath = fileURLToPath(new URL(`${targetBaseName}.js`, baseUrl));
	const dtsPath = fileURLToPath(new URL(`${targetBaseName}.d.ts`, baseUrl));

	await fs.mkdir(dirname(jsPath), { recursive: true });
	await fs.writeFile(jsPath, jsBody);
	await fs.writeFile(dtsPath, dtsBody);

}

main().catch((error) => {
	console.error("[embed-sqlite-wasm] Failed to generate payload:\n", error);
	process.exit(1);
});
