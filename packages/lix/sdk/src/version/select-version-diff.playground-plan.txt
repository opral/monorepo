-- original SQL --
select * from (
WITH
  -- Source side should expose explicit deletions (tombstones)
  -- Use state_with_tombstones to include rows with NULL snapshot_content
  s AS (
    SELECT entity_id, schema_key, file_id, change_id, commit_id, version_id, snapshot_content
    FROM state_with_tombstones
    WHERE version_id = 'test_0000000017'
  ),
  t AS (
    SELECT entity_id, schema_key, file_id, change_id, commit_id, version_id
    FROM state_all
    WHERE version_id = 'test_0000000047'
  ),
  joined AS (
    SELECT
      COALESCE(s.entity_id, t.entity_id) AS entity_id,
      COALESCE(s.schema_key, t.schema_key) AS schema_key,
      COALESCE(s.file_id, t.file_id) AS file_id,
      t.version_id AS before_version_id,
      t.change_id AS before_change_id,
      t.commit_id AS before_commit_id,
      s.version_id AS after_version_id,
      s.change_id AS after_change_id,
      s.commit_id AS after_commit_id,
      CASE
        -- Explicit delete in source (tombstone takes precedence)
        WHEN s.snapshot_content IS NULL THEN 'removed'
        -- Added in source only (live row)
        WHEN t.change_id IS NULL AND s.snapshot_content IS NOT NULL THEN 'added'
        -- Both present and different (live row in source)
        WHEN t.change_id IS NOT NULL AND s.snapshot_content IS NOT NULL AND s.change_id != t.change_id THEN 'modified'
        -- Both present and same (live row in source)
        ELSE 'unchanged'
      END AS status
    FROM s
    LEFT JOIN t ON t.entity_id = s.entity_id AND t.schema_key = s.schema_key AND t.file_id = s.file_id
    UNION ALL
    SELECT
      COALESCE(s.entity_id, t.entity_id) AS entity_id,
      COALESCE(s.schema_key, t.schema_key) AS schema_key,
      COALESCE(s.file_id, t.file_id) AS file_id,
      t.version_id AS before_version_id,
      t.change_id AS before_change_id,
      t.commit_id AS before_commit_id,
      -- For target-only rows (no source contribution), mirror target values for after_*
      -- This represents entities that exist in target but were never in source
      t.version_id AS after_version_id,
      t.change_id AS after_change_id,
      t.commit_id AS after_commit_id,
      CASE
        -- Target-only: entity exists in target but never existed in source (no explicit delete)
        -- Treated as unchanged since source doesn't modify it
        WHEN s.change_id IS NULL AND t.change_id IS NOT NULL THEN 'unchanged'
        ELSE 'unchanged'
      END AS status
    FROM t
    LEFT JOIN s ON s.entity_id = t.entity_id AND s.schema_key = t.schema_key AND s.file_id = t.file_id
    WHERE s.change_id IS NULL
  )
SELECT *
FROM joined
    ) as "diff" where "diff"."status" != ?

-- expanded SQL --
select * from (
WITH
  -- Source side should expose explicit deletions (tombstones)
  -- Use state_with_tombstones to include rows with NULL snapshot_content
  s AS (
    SELECT entity_id, schema_key, file_id, change_id, commit_id, version_id, snapshot_content
    FROM ( SELECT 
      entity_id,
      schema_key,
      file_id,
      version_id,
      plugin_key,
      snapshot_content,
      schema_version,
      created_at,
      updated_at,
      inherited_from_version_id,
      change_id,
      untracked,
      commit_id,
      writer_key,
      (
        SELECT json(metadata)
        FROM change
        WHERE change.id = internal_state_vtable.change_id
      ) AS metadata
    FROM internal_state_vtable ) AS state_with_tombstones
    WHERE version_id = 'test_0000000017'
  ),
  t AS (
    SELECT entity_id, schema_key, file_id, change_id, commit_id, version_id
    FROM ( SELECT 
      entity_id,
      schema_key,
      file_id,
      version_id,
      plugin_key,
      snapshot_content,
      schema_version,
      created_at,
      updated_at,
      inherited_from_version_id,
      change_id,
      untracked,
      commit_id,
      writer_key,
      (
        SELECT json(metadata)
        FROM change
        WHERE change.id = internal_state_vtable.change_id
      ) AS metadata
    FROM internal_state_vtable
    WHERE snapshot_content IS NOT NULL ) AS state_all
    WHERE version_id = 'test_0000000047'
  ),
  joined AS (
    SELECT
      COALESCE(s.entity_id, t.entity_id) AS entity_id,
      COALESCE(s.schema_key, t.schema_key) AS schema_key,
      COALESCE(s.file_id, t.file_id) AS file_id,
      t.version_id AS before_version_id,
      t.change_id AS before_change_id,
      t.commit_id AS before_commit_id,
      s.version_id AS after_version_id,
      s.change_id AS after_change_id,
      s.commit_id AS after_commit_id,
      CASE
        -- Explicit delete in source (tombstone takes precedence)
        WHEN s.snapshot_content IS NULL THEN 'removed'
        -- Added in source only (live row)
        WHEN t.change_id IS NULL AND s.snapshot_content IS NOT NULL THEN 'added'
        -- Both present and different (live row in source)
        WHEN t.change_id IS NOT NULL AND s.snapshot_content IS NOT NULL AND s.change_id != t.change_id THEN 'modified'
        -- Both present and same (live row in source)
        ELSE 'unchanged'
      END AS status
    FROM s
    LEFT JOIN t ON t.entity_id = s.entity_id AND t.schema_key = s.schema_key AND t.file_id = s.file_id
    UNION ALL
    SELECT
      COALESCE(s.entity_id, t.entity_id) AS entity_id,
      COALESCE(s.schema_key, t.schema_key) AS schema_key,
      COALESCE(s.file_id, t.file_id) AS file_id,
      t.version_id AS before_version_id,
      t.change_id AS before_change_id,
      t.commit_id AS before_commit_id,
      -- For target-only rows (no source contribution), mirror target values for after_*
      -- This represents entities that exist in target but were never in source
      t.version_id AS after_version_id,
      t.change_id AS after_change_id,
      t.commit_id AS after_commit_id,
      CASE
        -- Target-only: entity exists in target but never existed in source (no explicit delete)
        -- Treated as unchanged since source doesn't modify it
        WHEN s.change_id IS NULL AND t.change_id IS NOT NULL THEN 'unchanged'
        ELSE 'unchanged'
      END AS status
    FROM t
    LEFT JOIN s ON s.entity_id = t.entity_id AND s.schema_key = t.schema_key AND s.file_id = t.file_id
    WHERE s.change_id IS NULL
  )
SELECT *
FROM joined
    ) as "diff" where "diff"."status" != ?

-- rewritten SQL --
WITH
-- hoisted_internal_state_vtable_rewrite
internal_state_vtable_rewritten AS (
  WITH RECURSIVE
    version_descriptor_base AS (
      SELECT
        json_extract(desc.snapshot_content, '$.id') AS version_id,
        json_extract(desc.snapshot_content, '$.inherits_from_version_id') AS inherits_from_version_id
      FROM internal_state_cache_lix_version_descriptor desc
    ),
    version_inheritance(version_id, ancestor_version_id) AS (
      SELECT
        vdb.version_id,
        vdb.inherits_from_version_id
      FROM version_descriptor_base vdb
      WHERE vdb.inherits_from_version_id IS NOT NULL

      UNION ALL

      SELECT
        vir.version_id,
        vdb.inherits_from_version_id
      FROM version_inheritance vir
      JOIN version_descriptor_base vdb ON vdb.version_id = vir.ancestor_version_id
      WHERE vdb.inherits_from_version_id IS NOT NULL
    ),
    version_parent AS (
      SELECT
        vdb.version_id,
        vdb.inherits_from_version_id AS parent_version_id
      FROM version_descriptor_base vdb
      WHERE vdb.inherits_from_version_id IS NOT NULL
    )
  ,
    candidates AS (
      SELECT
        'U' || '~' || lix_encode_pk_part(u.file_id) || '~' || lix_encode_pk_part(u.entity_id) || '~' || lix_encode_pk_part(u.version_id) AS _pk,
        u.entity_id,
        u.schema_key,
        u.file_id,
        u.plugin_key,
        json(u.snapshot_content) AS snapshot_content,
        u.schema_version,
        u.version_id AS src_version_id,
        u.version_id AS dst_version_id,
        u.created_at,
        u.updated_at,
        NULL AS inherited_from_version_id,
        'untracked' AS change_id,
        1 AS untracked,
        'untracked' AS commit_id,
        NULL AS metadata,
        2 AS priority
      FROM internal_state_all_untracked u

      WHERE (
        (u.inheritance_delete_marker = 0 AND u.snapshot_content IS NOT NULL) OR
        (u.inheritance_delete_marker = 1 AND u.snapshot_content IS NULL)
      )

      UNION ALL

      SELECT
        'C' || '~' || lix_encode_pk_part(c.file_id) || '~' || lix_encode_pk_part(c.entity_id) || '~' || lix_encode_pk_part(c.version_id) AS _pk,
        c.entity_id,
        c.schema_key,
        c.file_id,
        c.plugin_key,
        json(c.snapshot_content) AS snapshot_content,
        c.schema_version,
        c.version_id AS src_version_id,
        c.version_id AS dst_version_id,
        c.created_at,
        c.updated_at,
        c.inherited_from_version_id,
        c.change_id,
        0 AS untracked,
        c.commit_id,
        NULL AS metadata,
        3 AS priority
      FROM internal_state_cache c

      WHERE (
        (c.inheritance_delete_marker = 0 AND c.snapshot_content IS NOT NULL) OR
        (c.inheritance_delete_marker = 1 AND c.snapshot_content IS NULL)
      )

      UNION ALL

      SELECT
        'CI' || '~' || lix_encode_pk_part(isc.file_id) || '~' || lix_encode_pk_part(isc.entity_id) || '~' || lix_encode_pk_part(vi.version_id) AS _pk,
        isc.entity_id,
        isc.schema_key,
        isc.file_id,
        isc.plugin_key,
        json(isc.snapshot_content) AS snapshot_content,
        isc.schema_version,
        isc.version_id AS src_version_id,
        vi.version_id AS dst_version_id,
        isc.created_at,
        isc.updated_at,
        isc.version_id AS inherited_from_version_id,
        isc.change_id,
        0 AS untracked,
        isc.commit_id,
        NULL AS metadata,
        4 AS priority
      FROM version_inheritance vi
      JOIN internal_state_cache isc ON isc.version_id = vi.ancestor_version_id
      WHERE isc.inheritance_delete_marker = 0
        AND isc.snapshot_content IS NOT NULL

      UNION ALL

      SELECT
        'UI' || '~' || lix_encode_pk_part(unt.file_id) || '~' || lix_encode_pk_part(unt.entity_id) || '~' || lix_encode_pk_part(vi.version_id) AS _pk,
        unt.entity_id,
        unt.schema_key,
        unt.file_id,
        unt.plugin_key,
        json(unt.snapshot_content) AS snapshot_content,
        unt.schema_version,
        unt.version_id AS src_version_id,
        vi.version_id AS dst_version_id,
        unt.created_at,
        unt.updated_at,
        unt.version_id AS inherited_from_version_id,
        'untracked' AS change_id,
        1 AS untracked,
        'untracked' AS commit_id,
        NULL AS metadata,
        5 AS priority
      FROM version_inheritance vi
      JOIN internal_state_all_untracked unt ON unt.version_id = vi.ancestor_version_id
      WHERE unt.inheritance_delete_marker = 0
        AND unt.snapshot_content IS NOT NULL
    ),
    ranked AS (
      SELECT
        c._pk,
        c.entity_id,
        c.schema_key,
        c.file_id,
        c.plugin_key,
        c.snapshot_content,
        c.schema_version,
        c.dst_version_id AS version_id,
        c.created_at,
        c.updated_at,
        c.inherited_from_version_id,
        c.change_id,
        c.untracked,
        c.commit_id,
        c.metadata,
        c.priority,
        ROW_NUMBER() OVER (
          PARTITION BY c.file_id, c.schema_key, c.entity_id, c.dst_version_id
          ORDER BY c.priority,
                   c.created_at DESC,
                   c._pk
        ) AS rn
      FROM candidates c

    )
  SELECT
    r._pk,
    r.entity_id,
    r.schema_key,
    r.file_id,
    r.plugin_key,
    r.snapshot_content,
    r.schema_version,
    r.version_id,
    r.created_at,
    r.updated_at,
    r.inherited_from_version_id,
    r.change_id,
    r.untracked,
    r.commit_id,
    COALESCE(r.metadata, ch.metadata) AS metadata,
    COALESCE(ws_dst.writer_key, ws_src.writer_key) AS writer_key
  FROM ranked r
  LEFT JOIN internal_state_writer ws_dst ON
    ws_dst.file_id = r.file_id AND
    ws_dst.entity_id = r.entity_id AND
    ws_dst.schema_key = r.schema_key AND
    ws_dst.version_id = r.version_id
  LEFT JOIN internal_state_writer ws_src ON
    ws_src.file_id = r.file_id AND
    ws_src.entity_id = r.entity_id AND
    ws_src.schema_key = r.schema_key AND
    ws_src.version_id = COALESCE(r.inherited_from_version_id, r.version_id)
  LEFT JOIN change ch ON ch.id = r.change_id
  WHERE r.rn = 1
)
select * from (
WITH
  -- Source side should expose explicit deletions (tombstones)
  -- Use state_with_tombstones to include rows with NULL snapshot_content
  s AS (
    SELECT entity_id, schema_key, file_id, change_id, commit_id, version_id, snapshot_content
    FROM ( SELECT 
      entity_id,
      schema_key,
      file_id,
      version_id,
      plugin_key,
      snapshot_content,
      schema_version,
      created_at,
      updated_at,
      inherited_from_version_id,
      change_id,
      untracked,
      commit_id,
      writer_key,
      (
        SELECT json(metadata)
        FROM change
        WHERE change.id = internal_state_vtable.change_id
      ) AS metadata
    FROM (SELECT entity_id, schema_key, file_id, plugin_key, snapshot_content, schema_version, version_id, created_at, updated_at, inherited_from_version_id, change_id, untracked, commit_id, metadata, writer_key FROM internal_state_vtable_rewritten) AS internal_state_vtable ) AS state_with_tombstones
    WHERE version_id = 'test_0000000017'
  ),
  t AS (
    SELECT entity_id, schema_key, file_id, change_id, commit_id, version_id
    FROM ( SELECT 
      entity_id,
      schema_key,
      file_id,
      version_id,
      plugin_key,
      snapshot_content,
      schema_version,
      created_at,
      updated_at,
      inherited_from_version_id,
      change_id,
      untracked,
      commit_id,
      writer_key,
      (
        SELECT json(metadata)
        FROM change
        WHERE change.id = internal_state_vtable.change_id
      ) AS metadata
    FROM (SELECT entity_id, schema_key, file_id, plugin_key, snapshot_content, schema_version, version_id, created_at, updated_at, inherited_from_version_id, change_id, untracked, commit_id, metadata, writer_key FROM internal_state_vtable_rewritten) AS internal_state_vtable
    WHERE snapshot_content IS NOT NULL ) AS state_all
    WHERE version_id = 'test_0000000047'
  ),
  joined AS (
    SELECT
      COALESCE(s.entity_id, t.entity_id) AS entity_id,
      COALESCE(s.schema_key, t.schema_key) AS schema_key,
      COALESCE(s.file_id, t.file_id) AS file_id,
      t.version_id AS before_version_id,
      t.change_id AS before_change_id,
      t.commit_id AS before_commit_id,
      s.version_id AS after_version_id,
      s.change_id AS after_change_id,
      s.commit_id AS after_commit_id,
      CASE
        -- Explicit delete in source (tombstone takes precedence)
        WHEN s.snapshot_content IS NULL THEN 'removed'
        -- Added in source only (live row)
        WHEN t.change_id IS NULL AND s.snapshot_content IS NOT NULL THEN 'added'
        -- Both present and different (live row in source)
        WHEN t.change_id IS NOT NULL AND s.snapshot_content IS NOT NULL AND s.change_id != t.change_id THEN 'modified'
        -- Both present and same (live row in source)
        ELSE 'unchanged'
      END AS status
    FROM s
    LEFT JOIN t ON t.entity_id = s.entity_id AND t.schema_key = s.schema_key AND t.file_id = s.file_id
    UNION ALL
    SELECT
      COALESCE(s.entity_id, t.entity_id) AS entity_id,
      COALESCE(s.schema_key, t.schema_key) AS schema_key,
      COALESCE(s.file_id, t.file_id) AS file_id,
      t.version_id AS before_version_id,
      t.change_id AS before_change_id,
      t.commit_id AS before_commit_id,
      -- For target-only rows (no source contribution), mirror target values for after_*
      -- This represents entities that exist in target but were never in source
      t.version_id AS after_version_id,
      t.change_id AS after_change_id,
      t.commit_id AS after_commit_id,
      CASE
        -- Target-only: entity exists in target but never existed in source (no explicit delete)
        -- Treated as unchanged since source doesn't modify it
        WHEN s.change_id IS NULL AND t.change_id IS NOT NULL THEN 'unchanged'
        ELSE 'unchanged'
      END AS status
    FROM t
    LEFT JOIN s ON s.entity_id = t.entity_id AND s.schema_key = t.schema_key AND s.file_id = t.file_id
    WHERE s.change_id IS NULL
  )
SELECT *
FROM joined
    ) as "diff" where "diff"."status" != ?1

-- plan --
[
  {
    "id": 1,
    "parent": 0,
    "notused": 0,
    "detail": "COMPOUND QUERY"
  },
  {
    "id": 2,
    "parent": 1,
    "notused": 0,
    "detail": "LEFT-MOST SUBQUERY"
  },
  {
    "id": 4,
    "parent": 2,
    "notused": 0,
    "detail": "CO-ROUTINE ranked"
  },
  {
    "id": 7,
    "parent": 4,
    "notused": 0,
    "detail": "CO-ROUTINE (subquery-40)"
  },
  {
    "id": 9,
    "parent": 7,
    "notused": 0,
    "detail": "CO-ROUTINE candidates"
  },
  {
    "id": 10,
    "parent": 9,
    "notused": 0,
    "detail": "COMPOUND QUERY"
  },
  {
    "id": 11,
    "parent": 10,
    "notused": 0,
    "detail": "LEFT-MOST SUBQUERY"
  },
  {
    "id": 14,
    "parent": 11,
    "notused": 61,
    "detail": "SEARCH u USING INDEX idx_internal_state_all_untracked_version_id (version_id=?)"
  },
  {
    "id": 57,
    "parent": 10,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 59,
    "parent": 57,
    "notused": 189,
    "detail": "SCAN c VIRTUAL TABLE INDEX 0:version_id"
  },
  {
    "id": 104,
    "parent": 10,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 107,
    "parent": 104,
    "notused": 0,
    "detail": "MATERIALIZE version_inheritance"
  },
  {
    "id": 111,
    "parent": 107,
    "notused": 0,
    "detail": "SETUP"
  },
  {
    "id": 114,
    "parent": 111,
    "notused": 28,
    "detail": "SCAN desc USING COVERING INDEX idx_internal_state_cache_lix_version_descriptor_id_parent"
  },
  {
    "id": 139,
    "parent": 107,
    "notused": 0,
    "detail": "RECURSIVE STEP"
  },
  {
    "id": 142,
    "parent": 139,
    "notused": 216,
    "detail": "SCAN vir"
  },
  {
    "id": 143,
    "parent": 139,
    "notused": 20,
    "detail": "SEARCH desc USING COVERING INDEX idx_internal_state_cache_lix_version_descriptor_id_parent (<expr>=?)"
  },
  {
    "id": 164,
    "parent": 104,
    "notused": 189,
    "detail": "SCAN isc VIRTUAL TABLE INDEX 0:inheritance_delete_marker"
  },
  {
    "id": 177,
    "parent": 104,
    "notused": 0,
    "detail": "BLOOM FILTER ON vi (version_id=?)"
  },
  {
    "id": 189,
    "parent": 104,
    "notused": 53,
    "detail": "SEARCH vi USING AUTOMATIC PARTIAL COVERING INDEX (version_id=?)"
  },
  {
    "id": 228,
    "parent": 10,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 233,
    "parent": 228,
    "notused": 216,
    "detail": "SCAN vi"
  },
  {
    "id": 237,
    "parent": 228,
    "notused": 61,
    "detail": "SEARCH unt USING INDEX idx_internal_state_all_untracked_version_id (version_id=?)"
  },
  {
    "id": 281,
    "parent": 7,
    "notused": 282,
    "detail": "SCAN c"
  },
  {
    "id": 312,
    "parent": 7,
    "notused": 0,
    "detail": "USE TEMP B-TREE FOR ORDER BY"
  },
  {
    "id": 348,
    "parent": 4,
    "notused": 262,
    "detail": "SCAN (subquery-40)"
  },
  {
    "id": 428,
    "parent": 2,
    "notused": 0,
    "detail": "MATERIALIZE change"
  },
  {
    "id": 430,
    "parent": 428,
    "notused": 0,
    "detail": "COMPOUND QUERY"
  },
  {
    "id": 431,
    "parent": 430,
    "notused": 0,
    "detail": "LEFT-MOST SUBQUERY"
  },
  {
    "id": 435,
    "parent": 431,
    "notused": 216,
    "detail": "SCAN c"
  },
  {
    "id": 437,
    "parent": 431,
    "notused": 47,
    "detail": "SEARCH s USING INDEX sqlite_autoindex_internal_snapshot_1 (id=?) LEFT-JOIN"
  },
  {
    "id": 461,
    "parent": 430,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 463,
    "parent": 461,
    "notused": 216,
    "detail": "SCAN t"
  },
  {
    "id": 483,
    "parent": 2,
    "notused": 0,
    "detail": "MATERIALIZE internal_state_vtable_rewritten"
  },
  {
    "id": 485,
    "parent": 483,
    "notused": 0,
    "detail": "CO-ROUTINE ranked"
  },
  {
    "id": 488,
    "parent": 485,
    "notused": 0,
    "detail": "CO-ROUTINE (subquery-41)"
  },
  {
    "id": 490,
    "parent": 488,
    "notused": 0,
    "detail": "CO-ROUTINE candidates"
  },
  {
    "id": 491,
    "parent": 490,
    "notused": 0,
    "detail": "COMPOUND QUERY"
  },
  {
    "id": 492,
    "parent": 491,
    "notused": 0,
    "detail": "LEFT-MOST SUBQUERY"
  },
  {
    "id": 494,
    "parent": 492,
    "notused": 216,
    "detail": "SCAN u"
  },
  {
    "id": 534,
    "parent": 491,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 536,
    "parent": 534,
    "notused": 199,
    "detail": "SCAN c VIRTUAL TABLE INDEX 0:"
  },
  {
    "id": 578,
    "parent": 491,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 581,
    "parent": 578,
    "notused": 0,
    "detail": "MATERIALIZE version_inheritance"
  },
  {
    "id": 585,
    "parent": 581,
    "notused": 0,
    "detail": "SETUP"
  },
  {
    "id": 588,
    "parent": 585,
    "notused": 28,
    "detail": "SCAN desc USING COVERING INDEX idx_internal_state_cache_lix_version_descriptor_id_parent"
  },
  {
    "id": 613,
    "parent": 581,
    "notused": 0,
    "detail": "RECURSIVE STEP"
  },
  {
    "id": 616,
    "parent": 613,
    "notused": 216,
    "detail": "SCAN vir"
  },
  {
    "id": 617,
    "parent": 613,
    "notused": 20,
    "detail": "SEARCH desc USING COVERING INDEX idx_internal_state_cache_lix_version_descriptor_id_parent (<expr>=?)"
  },
  {
    "id": 640,
    "parent": 578,
    "notused": 215,
    "detail": "SCAN vi"
  },
  {
    "id": 642,
    "parent": 578,
    "notused": 183,
    "detail": "SCAN isc VIRTUAL TABLE INDEX 0:inheritance_delete_marker,version_id"
  },
  {
    "id": 686,
    "parent": 491,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 691,
    "parent": 686,
    "notused": 216,
    "detail": "SCAN vi"
  },
  {
    "id": 693,
    "parent": 686,
    "notused": 61,
    "detail": "SEARCH unt USING INDEX idx_internal_state_all_untracked_version_id (version_id=?)"
  },
  {
    "id": 737,
    "parent": 488,
    "notused": 336,
    "detail": "SCAN c"
  },
  {
    "id": 766,
    "parent": 488,
    "notused": 0,
    "detail": "USE TEMP B-TREE FOR ORDER BY"
  },
  {
    "id": 802,
    "parent": 485,
    "notused": 336,
    "detail": "SCAN (subquery-41)"
  },
  {
    "id": 882,
    "parent": 483,
    "notused": 0,
    "detail": "MATERIALIZE change"
  },
  {
    "id": 884,
    "parent": 882,
    "notused": 0,
    "detail": "COMPOUND QUERY"
  },
  {
    "id": 885,
    "parent": 884,
    "notused": 0,
    "detail": "LEFT-MOST SUBQUERY"
  },
  {
    "id": 889,
    "parent": 885,
    "notused": 216,
    "detail": "SCAN c"
  },
  {
    "id": 891,
    "parent": 885,
    "notused": 47,
    "detail": "SEARCH s USING INDEX sqlite_autoindex_internal_snapshot_1 (id=?) LEFT-JOIN"
  },
  {
    "id": 916,
    "parent": 884,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 918,
    "parent": 916,
    "notused": 216,
    "detail": "SCAN t"
  },
  {
    "id": 940,
    "parent": 483,
    "notused": 336,
    "detail": "SCAN r"
  },
  {
    "id": 945,
    "parent": 483,
    "notused": 45,
    "detail": "SEARCH ws_dst USING PRIMARY KEY (file_id=? AND version_id=? AND entity_id=? AND schema_key=?) LEFT-JOIN"
  },
  {
    "id": 958,
    "parent": 483,
    "notused": 45,
    "detail": "SEARCH ws_src USING PRIMARY KEY (file_id=? AND version_id=? AND entity_id=? AND schema_key=?) LEFT-JOIN"
  },
  {
    "id": 992,
    "parent": 483,
    "notused": 53,
    "detail": "SEARCH ch USING AUTOMATIC COVERING INDEX (id=?) LEFT-JOIN"
  },
  {
    "id": 1034,
    "parent": 2,
    "notused": 262,
    "detail": "SCAN r"
  },
  {
    "id": 1059,
    "parent": 2,
    "notused": 53,
    "detail": "SEARCH ch USING AUTOMATIC COVERING INDEX (id=?) LEFT-JOIN"
  },
  {
    "id": 1070,
    "parent": 2,
    "notused": 0,
    "detail": "BLOOM FILTER ON internal_state_vtable_rewritten (version_id=? AND entity_id=? AND schema_key=? AND file_id=?)"
  },
  {
    "id": 1090,
    "parent": 2,
    "notused": 57,
    "detail": "SEARCH internal_state_vtable_rewritten USING AUTOMATIC PARTIAL COVERING INDEX (version_id=? AND entity_id=? AND schema_key=? AND file_id=?) LEFT-JOIN"
  },
  {
    "id": 1175,
    "parent": 1,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 1177,
    "parent": 1175,
    "notused": 0,
    "detail": "CO-ROUTINE ranked"
  },
  {
    "id": 1180,
    "parent": 1177,
    "notused": 0,
    "detail": "CO-ROUTINE (subquery-42)"
  },
  {
    "id": 1182,
    "parent": 1180,
    "notused": 0,
    "detail": "CO-ROUTINE candidates"
  },
  {
    "id": 1183,
    "parent": 1182,
    "notused": 0,
    "detail": "COMPOUND QUERY"
  },
  {
    "id": 1184,
    "parent": 1183,
    "notused": 0,
    "detail": "LEFT-MOST SUBQUERY"
  },
  {
    "id": 1187,
    "parent": 1184,
    "notused": 61,
    "detail": "SEARCH u USING INDEX idx_internal_state_all_untracked_version_id (version_id=?)"
  },
  {
    "id": 1230,
    "parent": 1183,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 1232,
    "parent": 1230,
    "notused": 189,
    "detail": "SCAN c VIRTUAL TABLE INDEX 0:version_id"
  },
  {
    "id": 1277,
    "parent": 1183,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 1280,
    "parent": 1277,
    "notused": 0,
    "detail": "MATERIALIZE version_inheritance"
  },
  {
    "id": 1284,
    "parent": 1280,
    "notused": 0,
    "detail": "SETUP"
  },
  {
    "id": 1287,
    "parent": 1284,
    "notused": 28,
    "detail": "SCAN desc USING COVERING INDEX idx_internal_state_cache_lix_version_descriptor_id_parent"
  },
  {
    "id": 1312,
    "parent": 1280,
    "notused": 0,
    "detail": "RECURSIVE STEP"
  },
  {
    "id": 1315,
    "parent": 1312,
    "notused": 216,
    "detail": "SCAN vir"
  },
  {
    "id": 1316,
    "parent": 1312,
    "notused": 20,
    "detail": "SEARCH desc USING COVERING INDEX idx_internal_state_cache_lix_version_descriptor_id_parent (<expr>=?)"
  },
  {
    "id": 1337,
    "parent": 1277,
    "notused": 189,
    "detail": "SCAN isc VIRTUAL TABLE INDEX 0:inheritance_delete_marker"
  },
  {
    "id": 1350,
    "parent": 1277,
    "notused": 0,
    "detail": "BLOOM FILTER ON vi (version_id=?)"
  },
  {
    "id": 1362,
    "parent": 1277,
    "notused": 53,
    "detail": "SEARCH vi USING AUTOMATIC PARTIAL COVERING INDEX (version_id=?)"
  },
  {
    "id": 1401,
    "parent": 1183,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 1406,
    "parent": 1401,
    "notused": 216,
    "detail": "SCAN vi"
  },
  {
    "id": 1410,
    "parent": 1401,
    "notused": 61,
    "detail": "SEARCH unt USING INDEX idx_internal_state_all_untracked_version_id (version_id=?)"
  },
  {
    "id": 1454,
    "parent": 1180,
    "notused": 282,
    "detail": "SCAN c"
  },
  {
    "id": 1485,
    "parent": 1180,
    "notused": 0,
    "detail": "USE TEMP B-TREE FOR ORDER BY"
  },
  {
    "id": 1521,
    "parent": 1177,
    "notused": 262,
    "detail": "SCAN (subquery-42)"
  },
  {
    "id": 1601,
    "parent": 1175,
    "notused": 0,
    "detail": "MATERIALIZE change"
  },
  {
    "id": 1603,
    "parent": 1601,
    "notused": 0,
    "detail": "COMPOUND QUERY"
  },
  {
    "id": 1604,
    "parent": 1603,
    "notused": 0,
    "detail": "LEFT-MOST SUBQUERY"
  },
  {
    "id": 1608,
    "parent": 1604,
    "notused": 216,
    "detail": "SCAN c"
  },
  {
    "id": 1610,
    "parent": 1604,
    "notused": 47,
    "detail": "SEARCH s USING INDEX sqlite_autoindex_internal_snapshot_1 (id=?) LEFT-JOIN"
  },
  {
    "id": 1634,
    "parent": 1603,
    "notused": 0,
    "detail": "UNION ALL"
  },
  {
    "id": 1636,
    "parent": 1634,
    "notused": 216,
    "detail": "SCAN t"
  },
  {
    "id": 1656,
    "parent": 1175,
    "notused": 262,
    "detail": "SCAN r"
  },
  {
    "id": 1683,
    "parent": 1175,
    "notused": 53,
    "detail": "SEARCH ch USING AUTOMATIC COVERING INDEX (id=?) LEFT-JOIN"
  },
  {
    "id": 1692,
    "parent": 1175,
    "notused": 0,
    "detail": "BLOOM FILTER ON internal_state_vtable_rewritten (version_id=? AND entity_id=? AND schema_key=? AND file_id=?)"
  },
  {
    "id": 1708,
    "parent": 1175,
    "notused": 53,
    "detail": "SEARCH internal_state_vtable_rewritten USING AUTOMATIC PARTIAL COVERING INDEX (version_id=? AND entity_id=? AND schema_key=? AND file_id=?) LEFT-JOIN"
  }
]